# Package =====================================================================

[build-system]
requires = ["setuptools >= 61.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "llm_examples"
dynamic = ["version"]  # version number is inferred in ./setup.py
description = "Collection of LLM examples."
authors = [
    { name = "Maxime Robeyns", email = "dev@maximerobeyns.com" },
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.10"
keywords = ["NLP", "machine learning", "transformers"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: GPU :: NVIDIA CUDA",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT Software License",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "ray",
    "peft",
    "vllm",
    "torch",
    "lightning",
    "accelerate",
    "datasets",
    "deepspeed",
    "tensorboard",
    "torchtyping",
    "wonderwords",
    "transformers",
    "sentencepiece",  # required for Llama tokenizer
    "hydra-core==1.3.2",
]


[project.optional-dependencies]
dev = [
    "jupyterlab>=3.5, <3.6",
    "ipywidgets>=8.0.4",
    "jupyterlab-vim",
    "jupyterlab-vimrc",
    "nbstripout==0.6.1",
    "pytest>=7.2.0",
]

docs = [
    "furo>=2022.9.29",
    "sphinx-autobuild>=2021.3.14",
    "sphinx-copybutton>=0.5.1",
    "sphinxext-opengraph>=0.7.2",
]

[project.urls]
Homepage = "https://github.com/MaximeRobeyns/transformer_finetuning_exmaples"
Repository = "https://github.com/MaximeRobeyns/transformer_finetuning_exmaples"
Documentation = "https://maximerobeyns.github.io/transformer_finetuning_exmaples/"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["llm_examples", "llm_examples/*"]

[tool.setuptools.package-data]
# include any package data as a list of paths here
llm_examples = [ ]

[black]
max-line-length = 80

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
files = "llm_examples/**/*.py"

[tool.pytest.ini_options]
# --ff for previously failed first
# -l for print state on failure
# -x for stop on first failure
# -s for show stdout while testing
# -v for verbose (e.g. show test names)
# -n for n threadsafe parallel workers
addopts = "-l -x --ff -s -v"
testpaths = ["tests"]
log_cli = "True"
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \not slow\"')",
    "mpi: marks tests as depending on mpi (deselect with '-m \not mpi\"')"
]
